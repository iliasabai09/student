{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\nmongoose.connect('mongodb+srv://angelinagelbling:PASS123@cluster0.wgeygwv.mongodb.net/nodejs', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('Connected to MongoDB')).catch(err => console.error('Failed to connect to MongoDB', err));\nconst UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\nconst User = mongoose.model('User', UserSchema);\napp.post('/register', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  if (!username || !password) {\n    return res.status(400).send('Username and password are required');\n  }\n  try {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      username,\n      password: hashedPassword\n    });\n    await newUser.save();\n    res.status(201).send('User registered');\n  } catch (error) {\n    console.error('Error registering user:', error);\n    res.status(400).send(`Error registering user: ${error.message}`);\n  }\n});\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      username\n    });\n    if (!user) {\n      return res.status(400).send('Invalid username or password');\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).send('Invalid username or password');\n    }\n\n    // Создайте JWT токен\n    const token = jwt.sign({\n      id: user._id\n    }, 'your_jwt_secret_key', {\n      expiresIn: '1h'\n    });\n    res.json({\n      token\n    });\n  } catch (error) {\n    console.error('Error logging in user:', error);\n    res.status(500).send(`Error logging in user: ${error.message}`);\n  }\n});\nconst PORT = process.env.PORT || 5002;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","bcrypt","bodyParser","cors","jwt","app","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","UserSchema","Schema","username","type","String","required","unique","password","User","model","post","req","res","body","status","send","hashedPassword","hash","newUser","save","message","user","findOne","isMatch","compare","token","sign","id","_id","expiresIn","PORT","process","env","listen"],"sources":["/Users/madiyar/Desktop/beauttystore-front/src/Homepage/RegisterForm.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\n\nmongoose.connect('mongodb+srv://angelinagelbling:PASS123@cluster0.wgeygwv.mongodb.net/nodejs', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n})\n  .then(() => console.log('Connected to MongoDB'))\n  .catch(err => console.error('Failed to connect to MongoDB', err));\n\nconst UserSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  password: { type: String, required: true }\n});\n\nconst User = mongoose.model('User', UserSchema);\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n\n  if (!username || !password) {\n    return res.status(400).send('Username and password are required');\n  }\n\n  try {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({ username, password: hashedPassword });\n    await newUser.save();\n    res.status(201).send('User registered');\n  } catch (error) {\n    console.error('Error registering user:', error);\n    res.status(400).send(`Error registering user: ${error.message}`);\n  }\n});\n\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    const user = await User.findOne({ username });\n\n    if (!user) {\n      return res.status(400).send('Invalid username or password');\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).send('Invalid username or password');\n    }\n\n    // Создайте JWT токен\n    const token = jwt.sign({ id: user._id }, 'your_jwt_secret_key', { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    console.error('Error logging in user:', error);\n    res.status(500).send(`Error logging in user: ${error.message}`);\n  }\n});\n\nconst PORT = process.env.PORT || 5002;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}